# Import modules
import hou
from hutil.Qt import QtCore, QtGui, QtWidgets

# Define a custom widget class that accepts drag and drop events
class NodeDropWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(NodeDropWidget, self).__init__(parent)
        # Set the widget size and title
        self.resize(400, 300)
        self.setWindowTitle("Drag and Drop Nodes")
        # Create a list view to display the dropped nodes
        self.list_view = QtWidgets.QListView(self)
        self.list_model = QtGui.QStandardItemModel(self.list_view)
        self.list_view.setModel(self.list_model)
        # Create a line edit to enter the new file parameter value
        self.line_edit = QtWidgets.QLineEdit(self)
        self.line_edit.setPlaceholderText("Enter new file value")
        # Create a button to apply the changes to the nodes
        self.button = QtWidgets.QPushButton("Apply", self)
        self.button.clicked.connect(self.apply_changes)
        # Create a layout to arrange the widgets
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.list_view)
        self.layout.addWidget(self.line_edit)
        self.layout.addWidget(self.button)
        self.setLayout(self.layout)
        # Enable drag and drop events
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        # Accept the event if it contains node paths
        if event.mimeData().hasFormat("text/plain"):
            event.acceptProposedAction()

    def dropEvent(self, event):
        # Get the node paths from the event
        node_paths = event.mimeData().text().split(",")
        # For each node path, create an item and add it to the list
        for node_path in node_paths:
            item = QtGui.QStandardItem()
            item.setText(node_path)
            self.list_model.appendRow(item)
        # Accept the event
        event.acceptProposedAction()

    def apply_changes(self):
        # Get the new file value from the line edit
        new_file = self.line_edit.text()
        # If the value is not empty, loop through the list items
        if new_file:
            for i in range(self.list_model.rowCount()):
                # Get the item and the node path
                item = self.list_model.item(i)
                node_path = item.text()
                # Get the node object from the path
                node = hou.node(node_path)
                # If the node exists and has a file parameter, set its value
                if node and node.parm("file"):
                    node.parm("file").set(new_file)
            # Clear the line edit
            self.line_edit.clear()

# Create an instance of the custom widget and show it
widget = NodeDropWidget()
widget.show()

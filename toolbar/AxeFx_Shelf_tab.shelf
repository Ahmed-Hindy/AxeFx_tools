<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="AxeFx_Shelf_tab" label="AxeFx">
    <memberTool name="KB3D_change_mat_res"/>
    <memberTool name="cam_bake"/>
    <memberTool name="Cam_shake"/>
    <memberTool name="usdPreviewSurface_converter"/>
    <memberTool name="material_processor"/>
  </toolshelf>

  <tool name="batchChangePaths_1.1" label="Batch Change Paths 1.1" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from importlib import reload
from my_scripts import batch_change_paths
reload(usd_mat_override)
]]></script>
  </tool>

  <tool name="clear_Hydra_cache" label="clear Hydra cache" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[panes = hou.ui.paneTabs()
sceneviewers = []
curDesktop = hou.ui.curDesktop()
desktopName = curDesktop.name()
#####identify scene viewers####
for p in panes:
    if p.type() == hou.paneTabType.SceneViewer: 
        sceneviewers.append(p)
              
for v in sceneviewers:
    hou.hscript("texcache -n")
    a = v.restartRenderer()]]></script>
  </tool>

  <tool name="Paragon_Importer" label="Paragon Importer" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
nodes = hou.selectedNodes()

for node in nodes:
    parms = node.globParms("*_texture")    
    for parm in parms:
        if parm.eval() != "":
            parm_new = parm.eval().replace("_EditorSphere", "")
            parm.set(parm_new)
            print(parm , "/n")]]></script>
  </tool>

  <tool name="KB3D_change_mat_res" label="KB3D change material resolution" icon="F:/Users/Ahmed Hindy/Downloads/k_icon_1_5f698675-1655-41df-be55-cabbec292518_1500x.jpeg">
    <script scriptType="python"><![CDATA[""" run this script on the matnet in a KB3D provided hipfile """

from importlib import reload
from my_scripts import KB3D_change_res
reload(KB3D_change_res)

KB3D_change_res.KB3DProcessor().run()
]]></script>
  </tool>

  <tool name="cam_bake" label="Camera Bake" icon="OBJ_camera">
    <script scriptType="python"><![CDATA[import hou

nodes           = hou.selectedNodes()
frame_range     = [int(hou.playbar.playbackRange()[0]), int(hou.playbar.playbackRange()[1])+1]
parms_animated  = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']
parms_static    = ['iconscale', 'aspect', 'vm_bgenable','focal', 'aperture', 'near', 'far',
                    'resx', 'resy', 'winsizex', 'winsizey', 'shutter', 'aspect']
for node in nodes:
    if node.type().name() == 'cam':
        node_baked = hou.node('/obj').createNode('cam', node.name() + '_baked')
        node_position = node.position()
        node_baked.setPosition([node_position[0], node_position[1]-2])
        hou.setFrame(int(hou.playbar.playbackRange()[0]))

        ### set static parms
        for parm_static in parms_static:
            node_baked.parm(parm_static).set(node.parm(parm_static).eval())

        ### set bg_image
        node_baked.parm('vm_background').set(node.parm('vm_background').rawValue())

        ### set animated parms
        for f in range(frame_range[0], frame_range[1]):
            hou.setFrame(f)
            node_baked.setWorldTransform(node.worldTransform())  ##maybe dont put it under a framerange forloop?
            for parm_animated in parms_animated:
                node_baked.parm(parm_animated).setKeyframe(hou.Keyframe(node_baked.parm(parm_animated).eval()))
]]></script>
  </tool>

  <tool name="Cam_shake" label="Cam Shake" icon="OBJ_camera">
    <script scriptType="python"><![CDATA["""
CAMERA SHAKE TOOL
credits to github.com/juanjo4martinez
-----------------
Add some movement to your camera to make it look like it's handheld.
Make sure your Camera node is selected when running this tool!
"""

# Get the selected camera.
this_node = hou.selectedNodes()
this_cam = this_node[0]

# /obj context.
obj = hou.node("/obj")

# Create CHOP Network called "cameraShake".
chopnet = obj.findOrCreateMotionEffectsNetwork()
chopnet.setName(f"cameraShake_{this_cam.name()}", unique_name=True)

# Inside the CHOPNet, create a Channel node and give it a name.
channel_node = chopnet.createNode("channel")
channel_node.setName(f"{this_cam.name()}_rotationClips", unique_name=True)

# Pick the rotation channels from the camera and use "Euler Rotation".
channel_node.parm("name0").set(f"{this_cam.name()}:r")
channel_node.parm("type0").set(1)

# Store the newly created channel's values as individual variables.
channel_value_x = channel_node.parm("value0x")
channel_value_y = channel_node.parm("value0y")
channel_value_z = channel_node.parm("value0z")

# Store the camera's rotation parameters as individual variables.
cam_rot_x = this_cam.parm("rx")
cam_rot_y = this_cam.parm("ry")
cam_rot_z = this_cam.parm("rz")

# CONDITIONAL:
# If rotation is animated, copy those keyframes into the channel's node values.
# If rotation is NOT animated, just copy the camera's rotation values.
if len(cam_rot_x.keyframes()) > 0:
    for k in cam_rot_x.keyframes():
        channel_value_x.setKeyframe(k)    
else: 
    channel_node.parm("value0x").set(this_cam.parm("rx").eval())

if len(cam_rot_y.keyframes()) > 0:
    for k in cam_rot_y.keyframes():
        channel_value_y.setKeyframe(k)
else: 
    channel_node.parm("value0y").set(this_cam.parm("ry").eval())

if len(cam_rot_z.keyframes()) > 0:
    for k in cam_rot_z.keyframes():
        channel_value_z.setKeyframe(k)    
else: 
    channel_node.parm("value0z").set(this_cam.parm("rz").eval())

# Set the channel units to Frames and the graph color to green.
channel_node.parm("units").set(0)
channel_node.parmTuple("gcolor").set((0,1,0))

# Turn off the Export flag on the Channel node.
channel_node.setExportFlag(0)

# Inside the CHOPNet, create a Math node.
math_node = channel_node.parent().createNode("math")
math_node.setName(f"{this_cam.name()}_addNoiseToRotation", unique_name=True)

# The Math node will sum (Add) the rotation channels to the noise.
math_node.parm("chopop").set(1)

# Turn on the Display and Export flags on the Math node.
math_node.setDisplayFlag(1)
math_node.setExportFlag(1)

# Inside the CHOPNet, create a Noise node.
noise_node = chopnet.createNode("noise")

# The name of the noise channels will be the same as in the Channel node (cam:rx,ry,rz).
noise_node.parm("channelname").set(f"`run('chopls {channel_node.path()}')`")

# The seed of the noise will be $C (number of channels, i.e: 3).
noise_node.parm("seed").setExpression("$C")

# Set the roughness to 0 for camera-like movements.
noise_node.parm("rough").set(0)

# Plug the Channel and Noise nodes into the Math inputs.
math_node.setInput(0, channel_node)
math_node.setInput(1, noise_node)

# Layout nodes inside the CHOPNet.
chopnet.layoutChildren()


# CONTROLLERS
# Stores the CHOPNet's parameters as a template.
group = chopnet.parmTemplateGroup()

# Create different parameters to control the effect.
stab = hou.FloatParmTemplate(
    "stab",
    "Stabilization",
    1,
    default_value=[.5],
    min=.1,
    max=1.5,
    help="How stabilized you want your camera to be (0.1 = Shaky footage, >1 = Stabilized footage)."
    )
    
amp = hou.FloatParmTemplate(
    "amp",
    "Amplitude",
    1,
    default_value=[10],
    max=20,
    help="How far the camera moves (0 = No motion, >10 = Wider range)."
    )
    
seed = hou.FloatParmTemplate(
    "seed",
    "Seed",
    1,
    default_value=[1],
    min=0,
    help="Add variation to your camera by changing this value."
    )

# Create a Tab to store the parameters we just created.
folder = hou.FolderParmTemplate(
    "cameraShake",
    "Camera Shake",
    parm_templates=[stab, amp, seed],
    )

# Add the Tab to the CHOPNet's template.
group.append(folder)

# Applies this new template to the CHOPNet.
chopnet.setParmTemplateGroup(group)

# The Â«StabilizationÂ» parameter controls the noise's Â«PeriodÂ» parameter.
noise_node.parm("period").setExpression(f"ch('{chopnet.path()}/stab')")

# The Â«AmpÂ» parameter controls the noise's Â«AmpÂ» parameter
noise_node.parm("amp").setExpression(f"ch('{chopnet.path()}/amp')")

# The Â«SeedÂ» parameter controls the noise's Y Translate (changes the waveform and adds variation).
noise_node.parm("transy").setExpression(f"ch('{chopnet.path()}/seed')")

# Deselect everything except the CHOPNet so the user sees where to tweak the values.
chopnet.setCurrent(1, clear_all_selected=1)
]]></script>
  </tool>

  <tool name="File_Loader" label="File Loader" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[####    STEPS   ####
# get the file directory
# get the list of files
# create a geo obj
# create a merge node inside


# for every file in filesList:
#   create a file SOP
#   path = file directory + file
#   connect the file SOP to the merge SOP

# append a null after with display and render flags



import hou
import os


obj = hou.node("/obj")
LoaderObj = obj.createNode("geo", "Multi_Loader")

folder = hou.ui.selectFile(title="choose folder to import from",
                           file_type=hou.fileType.Directory)  # Main folder
folder_expanded = hou.text.expandString(folder) # this is new, check "folder" isnt used later.
folderList = os.listdir(folder_expanded)  # Main Folder children list

# create merge and null SOPs
mergeSop = LoaderObj.createNode("merge", "All_merger")
nullMerge = LoaderObj.createNode("null", "OUT_MERGING")
nullMerge.setInput(0, mergeSop, 0)
nullMerge.setDisplayFlag(True)
nullMerge.setRenderFlag(True)


for file in folderList:  # iterate over each file entry and create a file SOP
    if(".fbx" or ".abc" or ".usd") in file:
        LoaderSop = LoaderObj.createNode("file", file)
        LoaderSop.parm("file").set(folder + file)  # set path
        mergeSop.setNextInput(LoaderSop)
    print(os.path.split(file)[-1])  #test 

#cleaning
LoaderObj.layoutChildren()
]]></script>
  </tool>

  <tool name="attribmantut" label="Attribute Manager tut" icon="hicon:/SVGIcons.index?VIEW_display_text.svg">
    <script scriptType="python"><![CDATA[import os
from package1.attribman import attribman
from importlib import reload


reload(attribman)
attribman.show()



print("printed from shelf tool..")]]></script>
  </tool>

  <tool name="XOP_SP_Linker" label="XOP SP Linker" icon="Xolsplink">
    <script scriptType="python"><![CDATA[#Xolotl Studio
#Created by Ymmanuel Flores on 2018
#Copyright 2018 Crowdorchestra SAPI de CV. All rights reserved.
#xolsplink v 1.0.0.8

import hou
import hrpyc
import xolsplink

from PySide2 import QtWidgets,QtCore

class XolSPLinkDialog(QtWidgets.QMainWindow):
    def __init__(self,parent = None):
        super(XolSPLinkDialog,self).__init__(parent)
        self.construct_ui()

    def construct_ui(self):
        self.setWindowTitle("Xolotl SP Live Link")
        self.setStyleSheet(hou.qt.styleSheet())
        self.setProperty("houdiniStyle",True)

        main_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(main_widget)

        g_layout = QtWidgets.QVBoxLayout()
        layoutServer = QtWidgets.QFormLayout()
        layoutMesh = QtWidgets.QFormLayout()
        main_widget.setLayout(g_layout)

        #Add widgets
        self.txtPort = QtWidgets.QLineEdit()
        self.txtPort.setText("8080")
        layoutServer.addRow('Port',self.txtPort)

        self.btnStartServer = QtWidgets.QPushButton('Start Server')
        self.btnStartServer.clicked.connect(self.startServer)
        layoutServer.addRow('',self.btnStartServer)

        self.cbUdim = QtWidgets.QCheckBox()
        layoutMesh.addRow('Udims',self.cbUdim)

        self.cmbNormal = QtWidgets.QComboBox()
        self.cmbNormal.addItem("OpenGL")
        self.cmbNormal.addItem("DirectX")
        layoutMesh.addRow('Format',self.cmbNormal)

        self.cmbRes = QtWidgets.QComboBox()
        self.cmbRes.addItem("128")
        self.cmbRes.addItem("256")
        self.cmbRes.addItem("512")
        self.cmbRes.addItem("1024")
        self.cmbRes.addItem("2048")
        self.cmbRes.addItem("4096")
        layoutMesh.addRow('Resolution',self.cmbRes)


        self.btnSendMesh = QtWidgets.QPushButton('Send Mesh')
        self.btnSendMesh.clicked.connect(self.sendMesh)
        layoutMesh.addRow('',self.btnSendMesh)


        #Main layout
        g_layout.addLayout(layoutServer)
        g_layout.addLayout(layoutMesh)


    def startServer(self):
        port = int(self.txtPort.text())
        try:
            hrpyc.start_server(port=port)
        except:
            print("Xolotl SP Live Link: Server is already listening")

    def sendMesh(self):
        normal = self.cmbNormal.currentText()
        res = self.cmbRes.currentText()
        udims = self.cbUdim.isChecked()
        xolsplink.server.sendMesh(normal,res,udims)

w = XolSPLinkDialog()
w.setWindowFlags(w.windowFlags() & QtCore.Qt.CustomizeWindowHint)
w.setWindowFlags(w.windowFlags() & ~QtCore.Qt.WindowMinMaxButtonsHint)
w.show()
]]></script>
  </tool>

  <tool name="Shader_Converter_echopr" label="Shader Converter 0.1" icon="hicon:/SVGIcons.index?COP2_aidenoise.svg">
    <script scriptType="python"><![CDATA[from importlib import reload
import ShaderConverter
import ShaderConverter.python.shader_conv_echopr as shaderConv


shaderConvWin = shaderConv.ShaderConv()
shaderConvWin.resize(360,500)
shaderConvWin.show()]]></script>
  </tool>

  <tool name="principled_from_pat" label="principled shader from path" icon="hicon:/SVGIcons.index?SOP_texture.svg">
    <script scriptType="python"><![CDATA[import hou
from importlib import reload
from my_scripts import principled_from_path
reload(principled_from_path)

]]></script>
  </tool>

  <tool name="Principled_to_MTLX_v4" label="Principled_to_MTLX_v4" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[# test script from adrien lambert

from importlib import reload
from AdrienLambert import principledShader_to_MTLX_v4
reload(principledShader_to_MTLX_v4)
]]></script>
  </tool>

  <tool name="usd_mat_override" label="usd_mat_override" icon="hicon:/SVGIcons.index?VOP_usdpreviewsurface.svg">
    <script scriptType="python"><![CDATA[from importlib import reload
from my_scripts import usd_mat_override
reload(usd_mat_override)

node = hou.node('/stage/x')
data = SolarisMaterialOverride().run_debug(target_stage=node)]]></script>
  </tool>

  <tool name="convert_from_relative_absolute" label="batch convert from relative absolute" icon="hicon:/SVGIcons.index?BUTTONS_reload.svg">
    <script scriptType="python"><![CDATA[### works on selected nodes, converts all relative parameters to absolute ###

import string
def abs_path_reference(node):
    parms = node.parms()
    
    #filter string type parameters
    refParms = []
    for i in parms:
        if ( (i.rawValue().find('ch("../') != -1) or (i.rawValue().find('chs("../') != -1) ):
            refParms.append(i)            
    print(str( len(refParms) ) + " parameters channel referenced and modified to:")
    
    #loop for finding out node(s) which channels reference from
    for parm in refParms:
        orig_expr=parm.rawValue()
        absPathStrs=[]
        relPathStrs=[]
        for i in parm.rawValue().split('('):
            for j in i.split(')'):
                if j.find('../')!=-1:                    
                    tmp1=j.split('/')
                    tmp1.pop()
                    tmp2='/'.join(tmp1)
                    relNodePath=tmp2[1:len(tmp2)]
                    refNode=node.node(relNodePath)
                    absNodePath=refNode.path()
                    absPathStrs.append(absNodePath)
                    relPathStrs.append(relNodePath)
                                                
        #setting new expressions
        new_expr=orig_expr
        for index in range(len(relPathStrs)):
            count=new_expr.count(relPathStrs[index])            
            new_expr=new_expr.replace(relPathStrs[index],absPathStrs[index],count)
        print(new_expr)
        parm.setExpression(new_expr)

    print("-------------------------------------------")
            
                                    
#excute script
sels = hou.selectedNodes()
if sels:
    for sel in sels:
        abs_path_reference(sel)
else:
    hou.ui.displayMessage('please select a Node', severity=hou.severityType.Warning, title='No Node Selected')
    ]]></script>
  </tool>

  <tool name="live_renamer" label="live_renamer" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from importlib import reload
from my_scripts import live_renamer as lr

reload(lr)

nodes = hou.selectedNodes()
renamer = lr.live_renamer(nodes)
renamer.show()
]]></script>
  </tool>

  <tool name="usdPreviewSurface_converter" label="usdPreviewSurface Converter" icon="hicon:/SVGIcons.index?VOP_usdpreviewsurface.svg">
    <script scriptType="python"><![CDATA[from importlib import reload
from Material_Processor import usd_material_processor
reload(usd_material_processor)


classMC  = usd_material_processor.USD_Shaders_Ingest()

# classMC.create_materials_from_textures()
]]></script>
  </tool>

  <tool name="material_processor" label="material processor" icon="hicon:/SVGIcons.index?COMMON_houdinimaterialx.svg">
    <script scriptType="python"><![CDATA[from importlib import reload
# import Example_Scripts.PySide2_test_v001 as PySide2_app
from Material_Processor import PySide2_ui
reload(PySide2_ui)


# PySide2_test_v002.main()
PySide2_ui.show_my_main_window()
]]></script>
  </tool>

  <tool name="tmp_btn" label="tmp button" icon="hicon:/SVGIcons.index?DOP_emptydata.svg">
    <script scriptType="python"><![CDATA[from importlib import reload
import hou
from Material_Processor import material_processor
reload(material_processor)

target_context = hou.node('/mat')
node = hou.node('/mat/material_mtlx_ORIG')
node = hou.node('/mat/material_arnold_ORIG')
# node = hou.node('/mat/principledshader_ORIG')

# material_processor.run(node, target_context)
material_processor.test()
]]></script>
  </tool>
</shelfDocument>
